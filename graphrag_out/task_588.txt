


SUCCESS: Global Search Response:
### Introduction

In the FStar language, lemmas and proofs are essential for ensuring the correctness of functions. When writing a function to compute the difference between the largest and smallest values in a list, it is crucial to use lemmas to assert the properties and correctness of the function. Below, we provide a concrete example of such a function along with the necessary lemmas and proofs.

### Function Definition

Let's define a function `range` that computes the difference between the largest and smallest values in a list of integers.

```fstar
open FStar.Seq

let rec max (s: seq int) : int =
  if Seq.length s = 0 then 0
  else if Seq.length s = 1 then Seq.index s 0
  else let h = Seq.index s 0 in
       let t = Seq.tail s in
       let m = max t in
       if h > m then h else m

let rec min (s: seq int) : int =
  if Seq.length s = 0 then 0
  else if Seq.length s = 1 then Seq.index s 0
  else let h = Seq.index s 0 in
       let t = Seq.tail s in
       let m = min t in
       if h < m then h else m

let range (s: seq int) : int =
  max s - min s
```

### Lemmas and Proofs

To prove the correctness of the `range` function, we need to establish that it correctly computes the difference between the maximum and minimum values in the list. We can use lemmas to assert these properties.

#### Lemma: Max Correctness

```fstar
val max_correct: s: seq int -> Lemma
  (requires (Seq.length s > 0))
  (ensures (forall i. 0 <= i < Seq.length s ==> Seq.index s i <= max s))
```

This lemma asserts that for any non-empty sequence `s`, the value returned by `max s` is greater than or equal to every element in `s`.

#### Lemma: Min Correctness

```fstar
val min_correct: s: seq int -> Lemma
  (requires (Seq.length s > 0))
  (ensures (forall i. 0 <= i < Seq.length s ==> min s <= Seq.index s i))
```

This lemma asserts that for any non-empty sequence `s`, the value returned by `min s` is less than or equal to every element in `s`.

#### Lemma: Range Correctness

```fstar
val range_correct: s: seq int -> Lemma
  (requires (Seq.length s > 0))
  (ensures (range s = max s - min s))
```

This lemma ensures that the `range` function correctly computes the difference between the maximum and minimum values of the sequence `s`.

### Conclusion

By defining these lemmas and proving them, we can ensure that the `range` function is correct. The use of lemmas in FStar is crucial for asserting the properties of functions and ensuring their correctness in logical proofs and reasoning [Data: Reports (9)].
